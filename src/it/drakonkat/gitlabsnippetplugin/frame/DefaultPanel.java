/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.drakonkat.gitlabsnippetplugin.frame;

import it.drakonkat.gitlabsnippetplugin.config.PropertiesManager;
import it.drakonkat.gitlabsnippetplugin.client.GitlabClient;
import it.drakonkat.gitlabsnippetplugin.client.model.GitlabModel;
import it.drakonkat.gitlabsnippetplugin.client.model.GitlabVisibility;
import it.drakonkat.gitlabsnippetplugin.config.ExportManager;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author mmazzocchetti
 */
public class DefaultPanel extends javax.swing.JPanel {

        private JFrame frame;
        private GitlabClient gitlabClient;

        /**
         * Creates new form DefaultPanel
         *
         * @param frame
         */
        public DefaultPanel(JFrame frame) {
                initComponents();
                this.frame = frame;
                gitlabClient = new GitlabClient();
                Properties p;
                try {
                        p = PropertiesManager.getInstance().loadProperties();
                        customUrl.setText(p.getProperty("url"));
                        accessToken.setText(p.getProperty("token"));
                } catch (FileNotFoundException ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "ErrorBox: JAVA01", JOptionPane.ERROR_MESSAGE);
                }
                caricaListaSnippet();
        }

        /**
         * This method is called from within the constructor to initialize the
         * form. WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jLabel1 = new javax.swing.JLabel();
                accessToken = new javax.swing.JTextField();
                jLabel2 = new javax.swing.JLabel();
                customUrl = new javax.swing.JTextField();
                list1 = new java.awt.List();
                caricaSnippet = new java.awt.Button();
                salvaConfigurazione = new java.awt.Button();
                generateButton = new java.awt.Button();
                deleteButton = new java.awt.Button();
                importSnippet = new java.awt.Button();
                exportSnippet = new java.awt.Button();
                loadAllButton = new java.awt.Button();
                jLabel3 = new javax.swing.JLabel();
                snippetPath = new javax.swing.JTextField();

                jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jLabel1.setText("AccessToken");

                jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jLabel2.setText("URL");

                list1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                list1ActionPerformed(evt);
                        }
                });

                caricaSnippet.setLabel("Carica snippet");
                caricaSnippet.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                reloadSnippetFromCloud(evt);
                        }
                });

                salvaConfigurazione.setLabel("Salva Configurazione");
                salvaConfigurazione.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                saveConfigurationCloud(evt);
                        }
                });

                generateButton.setLabel("Crea snippet");
                generateButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                geneerateSnippet(evt);
                        }
                });

                deleteButton.setLabel("Elimina");
                deleteButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                deleteSnippet(evt);
                        }
                });

                importSnippet.setLabel("Importa");
                importSnippet.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                importSnippetFromFile(evt);
                        }
                });

                exportSnippet.setLabel("Esporta");
                exportSnippet.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                exportSnippetInFile(evt);
                        }
                });

                loadAllButton.setLabel("Carica tutti");
                loadAllButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                reloadListSnippet(evt);
                        }
                });

                jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jLabel3.setText("Snippet path");

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(list1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(caricaSnippet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(salvaConfigurazione, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(exportSnippet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(importSnippet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(loadAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(customUrl)
                                                        .addComponent(accessToken)
                                                        .addComponent(snippetPath))))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(accessToken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(customUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(snippetPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(salvaConfigurazione, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(caricaSnippet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(importSnippet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(exportSnippet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(loadAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                );
        }// </editor-fold>//GEN-END:initComponents

        private void reloadSnippetFromCloud(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadSnippetFromCloud
                caricaListaSnippet();
        }//GEN-LAST:event_reloadSnippetFromCloud

        private void caricaListaSnippet() {
                try {
                        List<GitlabModel> snippets = gitlabClient.getSnippets();
                        caricaListaSnippet(snippets);
                } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "ErrorBox: JAVA01", JOptionPane.ERROR_MESSAGE);
                }
        }

        private void caricaListaSnippet(List<GitlabModel> snippets) {
                try {
                        list1.removeAll();
                        for (GitlabModel snippet : snippets) {
                                list1.add(snippet.getId() + "-" + snippet.getTitle(), new Integer(snippet.getId()));
                        }
                } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "ErrorBox: JAVA01", JOptionPane.ERROR_MESSAGE);
                }
        }

        private void saveConfigurationCloud(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigurationCloud
                Properties p;
                try {
                        p = PropertiesManager.getInstance().loadProperties();
                        p.setProperty("url", customUrl.getText());
                        p.setProperty("token", accessToken.getText());
                        PropertiesManager.getInstance().modifyProperties(p);
                } catch (FileNotFoundException ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "ErrorBox: JAVA01", JOptionPane.ERROR_MESSAGE);
                }
        }//GEN-LAST:event_saveConfigurationCloud

        private void list1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list1ActionPerformed
                try {
                        GitlabModel snippet = gitlabClient.getSnippet(list1.getSelectedItem().split("-")[0]);
                        snippet.setContent(gitlabClient.getCode(snippet));
                        loadSnippetPanel(snippet);
                } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "ErrorBox: JAVA02", JOptionPane.ERROR_MESSAGE);
                }
        }//GEN-LAST:event_list1ActionPerformed

        private void geneerateSnippet(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneerateSnippet
                GitlabModel snippet = new GitlabModel();
                snippet.setVisibility(GitlabVisibility.PRIVATE);
                loadSnippetPanel(snippet);
        }//GEN-LAST:event_geneerateSnippet

        private void deleteSnippet(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSnippet
                try {
                        gitlabClient.deleteSnippet(list1.getSelectedItem().split("-")[0]);
                        caricaListaSnippet();
                } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "ErrorBox: JAVA06", JOptionPane.ERROR_MESSAGE);
                }
        }//GEN-LAST:event_deleteSnippet

        private void importSnippetFromFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importSnippetFromFile
                try {
                        Set<GitlabModel> snippets = new HashSet<>();
                        snippets.addAll(gitlabClient.getSnippets());
                        if (snippetPath.getText() != null && !snippetPath.getText().equals("")) {
                                snippets.addAll(ExportManager.getInstance().importSnippet(snippetPath.getText()));
                        } else {
                                snippets.addAll(ExportManager.getInstance().importSnippet());
                        }
                        caricaListaSnippet(new ArrayList<>(snippets));
                } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "ErrorBox: JAVA01", JOptionPane.ERROR_MESSAGE);
                }
        }//GEN-LAST:event_importSnippetFromFile

        private void exportSnippetInFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSnippetInFile
                try {
                        if (snippetPath.getText() != null && !snippetPath.getText().equals("")) {
                                ExportManager.getInstance().exportSnippet(gitlabClient.getSnippets(), snippetPath.getText());
                        } else {
                                ExportManager.getInstance().exportSnippet(gitlabClient.getSnippets());
                        }
                } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "ErrorBox: EXP01", JOptionPane.ERROR_MESSAGE);
                }
        }//GEN-LAST:event_exportSnippetInFile

        private void reloadListSnippet(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadListSnippet
                try {
                        for (String string : list1.getItems()) {
                                String id = string.split("-")[0];
                                GitlabModel snippet = gitlabClient.getSnippet(id);
                                gitlabClient.saveSnippet(snippet);
                        }
                } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "ErrorBox: UPD01", JOptionPane.ERROR_MESSAGE);
                }
        }//GEN-LAST:event_reloadListSnippet
        private void loadSnippetPanel(GitlabModel gitlabModel) {
                SnippetDetailComponent panel = new SnippetDetailComponent(gitlabModel, frame);
                panel.setVisible(true);
                panel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
                frame.remove(this);
                frame.setContentPane(panel);
                frame.pack();
        }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JTextField accessToken;
        private java.awt.Button caricaSnippet;
        private javax.swing.JTextField customUrl;
        private java.awt.Button deleteButton;
        private java.awt.Button exportSnippet;
        private java.awt.Button generateButton;
        private java.awt.Button importSnippet;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel3;
        private java.awt.List list1;
        private java.awt.Button loadAllButton;
        private java.awt.Button salvaConfigurazione;
        private javax.swing.JTextField snippetPath;
        // End of variables declaration//GEN-END:variables
}
